<?php
/**
 * @Author im.phien
 * @Date   Apr 01, 2024
 */

namespace App\Http\Controllers;

use App\Http\Requests\User\CreateRequest;
use App\Http\Requests\User\UpdateRequest;
use App\Models\User;
use App\Services\UserService;
use App\Transformers\Commons\ErrorResource;
use App\Transformers\Commons\TrvSuccessResource;
use App\Transformers\User\UserResource;
use App\Transformers\User\UsersCollection;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use YaangVu\LaravelBase\Base\BaseController;
use OpenApi\Attributes as OA;

class UserController extends BaseController
{
    /**
     * @var UserService $service
     */
    public $service;

    /**
     * @param User   $user
     * @param string $userService
     */
    public function __construct(private readonly User $user, string $userService = UserService::class)
    {
        parent::__construct($this->user, $userService);
    }

    #[OA\Get(
        path: '/users',
        summary: 'Get all users.',
        security: [['BearerAuth' => []]],
        tags: ['USERS'],
        parameters: [
            new OA\Parameter(
                name: 'id',
                description: 'User uuid - **AND**',
                in: 'query',
                schema: new OA\Schema(
                          type: 'integer'
                      )
            ),
            new OA\Parameter(
                name: 'full_name',
                description: 'User full_name - **AND**',
                in: 'query',
                schema: new OA\Schema(
                          type: 'string',
                      )
            ),
            new OA\Parameter(
                name: 'role_id',
                description: 'User role - **AND**',
                in: 'query',
                schema: new OA\Schema(
                          type: 'integer',
                      )
            ),
        ],
        responses: [
            new OA\Response(
                response: 200,
                description: 'Successful',
                content: new OA\JsonContent(ref: UsersCollection::class)
            ),
            new OA\Response(
                response: 500,
                description: 'Server error',
                content: new OA\JsonContent(ref: ErrorResource::class)
            ),
        ]
    )]
    public function getAll(Request $request): JsonResponse
    {
        $result = UsersCollection::make($this->service->getAll($request));

        return response()->json($result);
    }

    #[OA\Get(
        path: '/users/{id}',
        summary: 'Get user detail',
        security: [['BearerAuth' => []]],
        tags: ['USERS'],
        responses: [
            new OA\Response(
                response: 200,
                description: 'Successful',
                content: new OA\JsonContent(ref: UserResource::class)
            ),
            new OA\Response(
                response: 500,
                description: 'Server error',
                content: new OA\JsonContent(ref: ErrorResource::class)
            ),
        ]
    )]
    public function show($id): JsonResponse
    {
        $result = UserResource::make($this->service->find($id));

        return response()->json($result); // TODO: Change the autogenerated stub
    }

    #[OA\Post(
        path: '/users',
        summary: 'Create user. ***DONE***',
        security: [['BearerAuth' => []]],
        requestBody: new OA\RequestBody(
            required: true,
            content: new OA\JsonContent(
                          ref: CreateRequest::class
                      )
        ),
        tags: ['USERS'],
        responses: [
            new OA\Response(
                response: 200,
                description: 'Successful',
                content: new OA\JsonContent(ref: TrvSuccessResource::class)
            ),
            new OA\Response(
                response: 400,
                description: 'Email invalid.',
                content: new OA\JsonContent(ref: ErrorResource::class)
            ),
            new OA\Response(
                response: 401,
                description: 'Unauthenticated',
                content: new OA\JsonContent(ref: ErrorResource::class)
            ),
            new OA\Response(
                response: 500,
                description: "Server error",
                content: new OA\JsonContent(ref: ErrorResource::class)
            )
        ]
    )]
    public function store(Request $request): JsonResponse
    {
        return parent::store($request); // TODO: Change the autogenerated stub
    }

    #[OA\Put(
        path: '/users/{id}',
        summary: 'Update user. ***DONE***',
        security: [['BearerAuth' => []]],
        requestBody: new OA\RequestBody(
            required: true,
            content: new OA\JsonContent(
                          ref: UpdateRequest::class
                      )
        ),
        tags: ['USERS'],
        responses: [
            new OA\Response(
                response: 200,
                description: 'Successful',
                content: new OA\JsonContent(ref: TrvSuccessResource::class)
            ),
            new OA\Response(
                response: 400,
                description: 'Email invalid.',
                content: new OA\JsonContent(ref: ErrorResource::class)
            ),
            new OA\Response(
                response: 401,
                description: 'Unauthenticated',
                content: new OA\JsonContent(ref: ErrorResource::class)
            ),
            new OA\Response(
                response: 500,
                description: "Server error",
                content: new OA\JsonContent(ref: ErrorResource::class)
            )
        ]
    )]
    public function update($id, Request $request): JsonResponse
    {
        return parent::update($id, $request); // TODO: Change the autogenerated stub
    }

    public function destroy($id): JsonResponse
    {
        return parent::destroy($id); // TODO: Change the autogenerated stub
    }
}